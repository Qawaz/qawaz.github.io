{"version":3,"file":"component---src-pages-timeline-site-index-tsx-043ab262a729839aafe0.js","mappings":"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","sources":["webpack://qawaz-site/../src/image-utils.ts","webpack://qawaz-site/../src/components/hooks.ts","webpack://qawaz-site/../src/components/layout-wrapper.tsx","webpack://qawaz-site/../src/components/picture.tsx","webpack://qawaz-site/../src/components/placeholder.tsx","webpack://qawaz-site/../src/components/main-image.tsx","webpack://qawaz-site/../src/components/gatsby-image.server.tsx","webpack://qawaz-site/../src/components/gatsby-image.browser.tsx","webpack://qawaz-site/../src/components/static-image.server.tsx","webpack://qawaz-site/../src/components/static-image.tsx","webpack://qawaz-site/./node_modules/gatsby-plugin-image/node_modules/camelcase/index.js","webpack://qawaz-site/./src/components/page/ContentPage.tsx","webpack://qawaz-site/./src/components/main/DemoSection.tsx","webpack://qawaz-site/./src/components/main/FeatureBox.tsx","webpack://qawaz-site/./src/icons/LightDarkIcon.tsx","webpack://qawaz-site/./src/icons/CloudSyncIcon.tsx","webpack://qawaz-site/./src/icons/SyncCircle.tsx","webpack://qawaz-site/./src/components/common/CustomMainButton.tsx","webpack://qawaz-site/./src/icons/GooglePlayIcon.tsx","webpack://qawaz-site/./src/icons/WebIcon.tsx","webpack://qawaz-site/./src/components/common/PageWrapper.tsx","webpack://qawaz-site/./src/icons/WindowsIcon.tsx","webpack://qawaz-site/./src/components/common/Typography.tsx","webpack://qawaz-site/./src/pages/timeline-site/index.tsx"],"sourcesContent":["import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  outputPixelDensities?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Partial<Node> & {\n  childImageSharp?: IGatsbyImageDataParent<Partial<Node>>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (\n  node: ImageDataLike | null\n): IGatsbyImageData | undefined => {\n  // This checks both for gatsbyImageData and gatsbyImage\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { Fragment, FunctionComponent, PropsWithChildren } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg%20height='${height}'%20width='${width}'%20xmlns='http://www.w3.org/2000/svg'%20version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg%20height='${height}'%20width='${width}'%20xmlns='http://www.w3.org/2000/svg'%20version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<\n  PropsWithChildren<ILayoutWrapperProps>\n> = function LayoutWrapper({ children, ...props }) {\n  return (\n    <Fragment>\n      <Sizer {...props} />\n      {children}\n\n      {SERVER ? <NativeScriptLoading /> : null}\n    </Fragment>\n  )\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        onStartLoad?.({\n          wasCached: true,\n        })\n\n        ssrImage.addEventListener(`load`, function onLoadListener() {\n          ssrImage.removeEventListener(`load`, onLoadListener)\n\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        if (!root.current) {\n          return\n        }\n\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n  filename?: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    breakpoints,\n    outputPixelDensities,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","'use strict';\n\nconst preserveCamelCase = string => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst character = string[i];\n\n\t\tif (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n\t\t\tstring = string.slice(0, i) + '-' + string.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n\t\t\tstring = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst camelCase = (input, options) => {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = Object.assign({\n\t\tpascalCase: false\n\t}, options);\n\n\tconst postProcess = x => options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n\t}\n\n\tconst hasUpperCase = input !== input.toLowerCase();\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input);\n\t}\n\n\tinput = input\n\t\t.replace(/^[_.\\- ]+/, '')\n\t\t.toLowerCase()\n\t\t.replace(/[_.\\- ]+(\\w|$)/g, (_, p1) => p1.toUpperCase())\n\t\t.replace(/\\d+(\\w|$)/g, m => m.toUpperCase());\n\n\treturn postProcess(input);\n};\n\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;\n","import React, {Fragment, PropsWithChildren} from \"react\";\r\nimport styled, {ThemeProvider} from \"styled-components\";\r\nimport Head from \"react-helmet\";\r\n// @ts-ignore\r\nimport {theme} from '../../common/theme/agencyModern';\r\n// @ts-ignore\r\nimport ResetCSS from '../../common/assets/css/style';\r\n// @ts-ignore\r\nimport {ContentWrapper, GlobalStyle,} from '../../containers/AgencyModern/agencyModern.style';\r\n// @ts-ignore\r\nimport Sticky from 'react-stickynode';\r\n// @ts-ignore\r\nimport Navbar from '../../containers/AgencyModern/Navbar';\r\n// @ts-ignore\r\nimport {DrawerProvider} from '../../common/contexts/DrawerContext';\r\n// @ts-ignore\r\nimport Footer from '../../containers/AgencyModern/Footer';\r\n\r\n// @ts-ignore\r\nimport data from \"../../common/data/AgencyModern\"\r\n\r\nexport const ContentPadding = styled.div`\r\n  padding: 8em 3rem;\r\n  max-width: 80%;\r\n  align-self: center;\r\n\r\n  & > * {\r\n    padding-left: 24px;\r\n  }\r\n`\r\n\r\nconst contentPageLinks = {\r\n    leftMenuItems: data.leftMenuItems.map((e: any) => ({...e, staticLink: true, path: \"/\"})),\r\n    rightMenuItems: data.rightMenuItems.map((e: any) => ({...e, staticLink: true, path: \"/\"})),\r\n    mobileMenuItems: data.mobileMenuItems.map((e: any) => ({...e, staticLink: true, path: \"/\"})),\r\n}\r\n\r\nexport default function ContentPage(props: PropsWithChildren<{ title?: string }>) {\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <Fragment>\r\n                <Head>\r\n                    <title>{props.title || \"Qawaz - App Development Company\"}</title>\r\n                    <meta name=\"theme-color\" content=\"#FF825C\"/>\r\n                    <meta name=\"Description\" content=\"App Development Company\"/>\r\n\r\n                    {/* Load google fonts */}\r\n                    <link\r\n                        href=\"https://fonts.googleapis.com/css?family=B612:400,400i,700,700i|DM+Sans:400,400i,500,500i,700,700i&display=swap\"\r\n                        rel=\"stylesheet\"\r\n                    />\r\n                </Head>\r\n                <ResetCSS/>\r\n                <GlobalStyle/>\r\n                <ContentWrapper>\r\n                    <Sticky top={0} innerZ={9999} activeClass=\"sticky-nav-active\">\r\n                        <DrawerProvider>\r\n                            <Navbar {...contentPageLinks}/>\r\n                        </DrawerProvider>\r\n                    </Sticky>\r\n                    {props.children}\r\n                    <Footer/>\r\n                </ContentWrapper>\r\n            </Fragment>\r\n        </ThemeProvider>\r\n    )\r\n}","import styled from \"styled-components\";\r\n\r\nexport const DemoContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 1em 4em;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  ${props => props.theme.breakpoints.up(\"sm\")} {\r\n    flex-direction: row;\r\n  }\r\n`\r\n\r\nexport const DemoText = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nexport const DemoImage = styled.div`\r\n\r\n`","import styled from \"styled-components\";\r\nimport {useTheme} from \"@material-ui/core\";\r\n\r\n\r\nexport const FeatureBox = styled.div`\r\n  width: 12em;\r\n  height: 2em;\r\n  border-radius: 1.5em;\r\n  padding : 1em;\r\n  margin : 1em;\r\n  display:flex;\r\n  flex-direction:row;\r\n  align-items:center;\r\n  justify-content:center;\r\n  border : 2px solid ${props=> props.theme.palette.primary.main}; \r\n`\r\n\r\nexport const FeatureText = styled.span`\r\n  font-family: 'Roboto', 'sans-serif';\r\n  padding-left : 1em;\r\n  color : ${props=> props.theme.palette.primary.main};\r\n`","import React from \"react\"\r\n\r\nconst LightDarkIcon = () => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"60\" height=\"60\" viewBox={\"0 0 60 60\"}>\r\n            <path id=\"theme-light-dark\"\r\n                  d=\"M18.272,3a18.556,18.556,0,0,0,.089,31.716A16.081,16.081,0,0,1,2,18.856,16.069,16.069,0,0,1,18.272,3M52.5,7.323l4.231,4.123L10.669,56.338,6.438,52.215,52.5,7.323M34.219,14.329,29.84,11.648l-4.26,2.883,1.243-4.9L22.71,6.573l5.178-.346L29.6,1.47l1.982,4.7,5.118.086L32.71,9.514l1.509,4.815M24.456,24.738l-3.432-2.1L17.71,24.882l1.006-3.806-3.225-2.393,4.024-.259L20.846,14.7l1.509,3.662,4.024.086-3.107,2.508,1.183,3.777M52.3,36.155A16.069,16.069,0,0,1,36.024,52.013a16.519,16.519,0,0,1-9.645-3.085L49.13,26.756a15.555,15.555,0,0,1,3.166,9.4M39.278,55.127l8.2-3.316-.71,9.659-7.485-6.343m12.811-7.785,3.4-7.987L62,46.679l-9.911.663m3.4-14.3-3.373-8.015L62,25.718l-6.509,7.323M24.574,51.811l8.2,3.316-7.485,6.314Z\"\r\n                  transform=\"translate(-2 -1.47)\"/>\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default LightDarkIcon","import React from \"react\"\r\n\r\n\r\nconst CloudSyncIcon = () => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" style={{width : \"48px\", height : \"48px\"}} viewBox=\"0 0 60 60\">\r\n            <path id=\"database-sync\"\r\n                  d=\"M51.368,30v4.5C58.345,34.5,64,39.873,64,46.5a11.5,11.5,0,0,1-2.116,6.63l-3.442-3.27a7.173,7.173,0,0,0,.821-3.36A7.7,7.7,0,0,0,51.368,39v4.5l-7.105-6.75L51.368,30m0,33V58.5c-6.976,0-12.632-5.373-12.632-12a11.5,11.5,0,0,1,2.116-6.63l3.442,3.27a7.173,7.173,0,0,0-.821,3.36A7.7,7.7,0,0,0,51.368,54V49.5l7.105,6.75L51.368,63M29.263,3C43.221,3,54.526,8.37,54.526,15S43.221,27,29.263,27,4,21.63,4,15,15.305,3,29.263,3M4,21c0,6.63,11.305,12,25.263,12a49.485,49.485,0,0,0,9.916-.96,19.444,19.444,0,0,0-6.189,9.84L29.263,42C15.305,42,4,36.63,4,30V21m50.526,0v6H52.947l-1.895.09c2.211-1.8,3.474-3.87,3.474-6.09M4,36c0,6.63,11.305,12,25.263,12l3.158-.09a19.348,19.348,0,0,0,3,8.73L29.263,57C15.305,57,4,51.63,4,45Z\"\r\n                  transform=\"translate(-4 -3)\"/>\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default CloudSyncIcon","import React from \"react\"\r\n\r\nconst SyncCircle = () => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" style={{width : \"48px\", height : \"48px\"}} viewBox=\"0 0 60 60\">\r\n            <path id=\"sync-circle\"\r\n                  d=\"M2,32A30,30,0,1,0,32,2,30,30,0,0,0,2,32m40.8,5.16A11.942,11.942,0,0,0,32,20v6l-9.36-9L32,8v6A18,18,0,0,1,50,32a17.7,17.7,0,0,1-2.79,9.57M14,32a17.7,17.7,0,0,1,2.79-9.57l4.41,4.41A11.942,11.942,0,0,0,32,44V38l9,9-9,9V50A18,18,0,0,1,14,32Z\"\r\n                  transform=\"translate(-2 -2)\"/>\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default SyncCircle",";\r\nimport {FC} from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const CustomMainButton = styled.button`\r\n  border-radius:1.5em;\r\n  height:3.6em;\r\n  text-align:center;\r\n  text-decoration:none;\r\n  opacity:0.9;\r\n  padding:2em;\r\n  border:0;\r\n  display:flex;\r\n  flex-direction:row;\r\n  align-items:center;\r\n  cursor:pointer;\r\n  margin:0.5em;\r\n  background : ${props=> props.theme.palette.primary.main};\r\n  &:hover{\r\n    opacity:1;\r\n  }\r\n`","import React from \"react\"\r\n\r\n\r\nconst GooglePlayIcon = () => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" style={{width : \"48px\", height : \"48px\"}} viewBox=\"0 0 35.022 39.987\">\r\n            <g id=\"icons8-google-play\" transform=\"translate(-7 -4.008)\">\r\n                <path id=\"Path_8\" data-name=\"Path 8\"\r\n                      d=\"M7.7,4.043A1,1,0,0,0,7,5.121v37.97a.835.835,0,0,0,.5.856L27.681,23.883Z\" fill=\"#4db6ac\"/>\r\n                <path id=\"Path_9\" data-name=\"Path 9\"\r\n                      d=\"M33.237,18.36l-8.307-4.8L8.789,4.244a1.454,1.454,0,0,0-1.084-.2l19.977,19.84Z\" fill=\"#dce775\"/>\r\n                <path id=\"Path_10\" data-name=\"Path 10\"\r\n                      d=\"M8.417,43.8,33.282,29.445l-5.6-5.562L7.5,43.947A1.089,1.089,0,0,0,8.417,43.8Z\" fill=\"#d32f2f\"/>\r\n                <path id=\"Path_11\" data-name=\"Path 11\"\r\n                      d=\"M41.4,23.071c-.8-.429-8.1-4.676-8.1-4.676l-.061-.035-5.556,5.523,5.6,5.562,8.059-4.653C42.285,24.248,42.194,23.5,41.4,23.071Z\"\r\n                      fill=\"#fbc02d\"/>\r\n            </g>\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default GooglePlayIcon","import React from \"react\"\r\n\r\nconst WebIcon = () => {\r\n    return (\r\n        <svg id=\"world-wide-web\" xmlns=\"http://www.w3.org/2000/svg\" style={{width : \"48px\", height : \"48px\"}}\r\n             viewBox=\"0 0 48.068 48.067\">\r\n            <path id=\"Path_15\" data-name=\"Path 15\"\r\n                  d=\"M59.872,45.455c-5.8,12.167-14.73,14.8-21.208,14.8a22.689,22.689,0,0,1-18.392-9.585A22.975,22.975,0,0,1,17.456,29.8l.451-.929a22.455,22.455,0,0,1,39.149-4.281A22.974,22.974,0,0,1,59.872,45.455Z\"\r\n                  transform=\"translate(-14.63 -13.592)\" fill=\"#65b1fc\"/>\r\n            <path id=\"Path_16\" data-name=\"Path 16\"\r\n                  d=\"M277.208,45.455c-5.8,12.167-14.73,14.8-21.208,14.8V15a22.689,22.689,0,0,1,18.392,9.585A22.975,22.975,0,0,1,277.208,45.455Z\"\r\n                  transform=\"translate(-231.966 -13.592)\" fill=\"#1689fc\"/>\r\n            <path id=\"Path_17\" data-name=\"Path 17\"\r\n                  d=\"M43.81,10.177A24.156,24.156,0,0,0,24.264,0,24.14,24.14,0,0,0,2.127,14.993l-.479.986C-.938,23.853.069,31.312,4.718,37.891A24.156,24.156,0,0,0,24.264,48.068,24.219,24.219,0,0,0,46.289,33.413l.422-.845C49.526,24.558,48.54,16.863,43.81,10.177ZM7.027,36.257a21.527,21.527,0,0,1-2.619-19.6l.366-.761A21.465,21.465,0,0,1,17,4.168c-3.408,4.45-5.464,13.106-5.21,15.922a.834.834,0,0,0-.056.282c-.732,9.435,1.408,18.542,5.436,23.64A21.5,21.5,0,0,1,7.027,36.257ZM22.856,45a7.614,7.614,0,0,1-2.9-2.065c-3.943-4.253-6.112-13.237-5.408-22.335v-.253c0-.085.028-.2.028-.282.817-8.759,4.253-15.669,8.28-16.993Zm2.816-.028V3.07c4.337,1.436,7.971,9.416,8.393,18.936.394,8.787-1.8,17.04-5.6,21.039A7.13,7.13,0,0,1,25.672,44.969ZM44.12,31.413c-3.154,6.647-7.6,10.74-12.758,12.571,3.774-4.76,5.914-13.247,5.52-22.09-.338-7.492-2.45-13.951-5.52-17.838A21.352,21.352,0,0,1,44.12,31.413Z\"\r\n                  transform=\"translate(-0.23)\" fill=\"#96ebe6\"/>\r\n            <path id=\"Path_18\" data-name=\"Path 18\"\r\n                  d=\"M275.546,10.177A24.156,24.156,0,0,0,256,0V48.068a24.219,24.219,0,0,0,22.025-14.655l.422-.845C281.262,24.558,280.276,16.863,275.546,10.177ZM257.408,44.969V3.07c4.337,1.436,7.971,9.416,8.393,18.936.394,8.787-1.8,17.04-5.6,21.039A7.13,7.13,0,0,1,257.408,44.969Zm18.448-13.556c-3.154,6.647-7.6,10.74-12.758,12.571,3.774-4.76,5.914-13.247,5.52-22.09-.338-7.492-2.45-13.951-5.52-17.838a21.352,21.352,0,0,1,12.759,27.357Z\"\r\n                  transform=\"translate(-231.966)\" fill=\"#00c8c8\"/>\r\n            <path id=\"Path_19\" data-name=\"Path 19\"\r\n                  d=\"M43.749,151H4.319A4.3,4.3,0,0,0,0,155.225v11.266a4.3,4.3,0,0,0,4.319,4.225h39.43a4.3,4.3,0,0,0,4.319-4.225V155.225A4.3,4.3,0,0,0,43.749,151Z\"\r\n                  transform=\"translate(0 -136.824)\" fill=\"#0053bf\"/>\r\n            <path id=\"Path_20\" data-name=\"Path 20\"\r\n                  d=\"M280.034,155.225v11.266a4.3,4.3,0,0,1-4.319,4.225H256V151h19.715A4.3,4.3,0,0,1,280.034,155.225Z\"\r\n                  transform=\"translate(-231.966 -136.824)\" fill=\"#05377f\"/>\r\n            <path id=\"Path_21\" data-name=\"Path 21\"\r\n                  d=\"M194.924,213.011l-2.816,5.633a1.413,1.413,0,0,1-2.535,0l-1.549-3.1-1.549,3.1a1.477,1.477,0,0,1-2.535,0l-2.816-5.633a1.411,1.411,0,0,1,2.535-1.239l1.549,3.1,1.549-3.1a1.463,1.463,0,0,1,2.535,0l1.549,3.1,1.549-3.1a1.411,1.411,0,0,1,2.535,1.239Z\"\r\n                  transform=\"translate(-163.99 -191.174)\" fill=\"#e1f1fa\"/>\r\n            <path id=\"Path_22\" data-name=\"Path 22\"\r\n                  d=\"M340.443,219.459a1.409,1.409,0,0,1-1.26-.778l-1.557-3.114-1.557,3.114a1.466,1.466,0,0,1-2.519,0l-2.7-5.4a1.393,1.393,0,0,1,.965-2.265,1.55,1.55,0,0,1,1.436.77l1.557,3.113,1.557-3.113a1.466,1.466,0,0,1,2.519,0l1.557,3.113L342,211.788a1.408,1.408,0,0,1,2.519,1.26l-2.816,5.633A1.409,1.409,0,0,1,340.443,219.459Z\"\r\n                  transform=\"translate(-299.51 -191.201)\" fill=\"#bfe1ff\"/>\r\n            <path id=\"Path_23\" data-name=\"Path 23\"\r\n                  d=\"M43.76,211.013a1.473,1.473,0,0,0-1.35.776L40.853,214.9,39.3,211.788a1.428,1.428,0,0,0-2.519,0L35.22,214.9l-1.557-3.113a1.408,1.408,0,0,0-2.519,1.26l2.816,5.633a1.409,1.409,0,0,0,2.519,0l1.557-3.114,1.557,3.114a1.409,1.409,0,0,0,2.519,0l2.653-5.306a1.424,1.424,0,0,0-1.005-2.363Z\"\r\n                  transform=\"translate(-28.085 -191.201)\" fill=\"#e1f1fa\"/>\r\n            <path id=\"Path_24\" data-name=\"Path 24\"\r\n                  d=\"M262.9,213.011l-2.816,5.633a1.413,1.413,0,0,1-2.535,0l-1.549-3.1v-4.506a1.421,1.421,0,0,1,1.267.732l1.549,3.1,1.549-3.1a1.411,1.411,0,0,1,2.535,1.239Z\"\r\n                  transform=\"translate(-231.966 -191.174)\" fill=\"#bfe1ff\"/>\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default WebIcon","import {dark} from \"../../theme/themes\";\r\nimport {ThemeProvider} from \"styled-components\";\r\nimport React from \"react\";\r\n\r\nexport function Providers(props: React.PropsWithChildren<any>) {\r\n    const theme = dark\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            {props.children}\r\n        </ThemeProvider>\r\n    )\r\n}","import React from \"react\"\r\n\r\nconst WindowsIcon = () => {\r\n    return (\r\n        <svg id=\"world-wide-web\" xmlns=\"http://www.w3.org/2000/svg\" style={{width : \"48px\", height : \"48px\"}} viewBox={\"0 0 48 48\"}>\r\n            <path fill=\"#00b0ff\"\r\n                  d=\"M20 25.026L5.011 25 5.012 37.744 20 39.818zM22 25.03L22 40.095 42.995 43 43 25.066zM20 8.256L5 10.38 5.014 23 20 23zM22 7.973L22 23 42.995 23 42.995 5z\"/>\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default WindowsIcon","import React, {CSSProperties, PropsWithChildren} from \"react\";\r\nimport {useAppTheme} from \"../../theme/themes\";\r\n\r\ninterface TypographyProps extends PropsWithChildren {\r\n    className?: string,\r\n    id?: string,\r\n    align?: \"center\" | \"left\" | \"right\",\r\n    style?: CSSProperties,\r\n    variant?: \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"p\" | \"span\" | \"body1\" | \"body2\"\r\n}\r\n\r\nexport function Typography(props: TypographyProps) {\r\n    const realVariant = props.variant == \"body1\" || props.variant == \"body2\" ? \"p\" : (props.variant || \"span\")\r\n\r\n    const theme = useAppTheme()\r\n\r\n    // @ts-ignore\r\n    const family = theme.typography[realVariant]\r\n\r\n    return React.createElement(realVariant, {\r\n        className: props.className,\r\n        id: props.id,\r\n        style: {\r\n            textAlign: props.align || \"left\",\r\n            fontFamily : family == null ? \"Roboto\" : family.fontFamily,\r\n            fontSize : family == null ? \"1rem\" : family.fontSize,\r\n            ...props.style\r\n        },\r\n        children: props.children\r\n    });\r\n}","import React from \"react\"\r\n\r\nimport styled from \"styled-components\";\r\nimport {StaticImage} from \"gatsby-plugin-image\";\r\nimport {DemoContainer, DemoImage, DemoText} from \"../../components/main/DemoSection\";\r\nimport {FeatureBox, FeatureText} from \"../../components/main/FeatureBox\";\r\nimport LightDarkIcon from \"../../icons/LightDarkIcon\";\r\nimport CloudSyncIcon from \"../../icons/CloudSyncIcon\";\r\nimport SyncCircle from \"../../icons/SyncCircle\";\r\nimport {CustomMainButton} from \"../../components/common/CustomMainButton\";\r\nimport GooglePlayIcon from \"../../icons/GooglePlayIcon\";\r\nimport WebIcon from \"../../icons/WebIcon\";\r\nimport {Providers} from \"../../components/common/PageWrapper\";\r\nimport {Link} from \"gatsby\";\r\nimport WindowsIcon from \"../../icons/WindowsIcon\";\r\nimport {Typography} from \"../../components/common/Typography\";\r\nimport {useAppTheme} from \"../../theme/themes\";\r\n// @ts-ignore\r\nimport Sticky from 'react-stickynode';\r\n// @ts-ignore\r\nimport {theme} from '../../common/theme/agencyModern';\r\n// @ts-ignore\r\nimport ResetCSS from '../../common/assets/css/style';\r\n// @ts-ignore\r\nimport {DrawerProvider} from '../../common/contexts/DrawerContext';\r\n// @ts-ignore\r\nimport Navbar from '../../containers/AgencyModern/Navbar';\r\n// @ts-ignore\r\nimport Banner from '../../containers/AgencyModern/Banner';\r\n// @ts-ignore\r\nimport Services from '../../containers/AgencyModern/Services';\r\n// @ts-ignore\r\nimport Features from '../../containers/AgencyModern/Features';\r\n// @ts-ignore\r\nimport WorkHard from '../../containers/AgencyModern/WorkHard';\r\n// @ts-ignore\r\nimport UltimateFeature from '../../containers/AgencyModern/UltimateFeature';\r\n// @ts-ignore\r\nimport Customer from '../../containers/AgencyModern/Customer';\r\n// @ts-ignore\r\nimport News from '../../containers/AgencyModern/News';\r\n// @ts-ignore\r\nimport Subscribe from '../../containers/AgencyModern/Subscribe';\r\n// @ts-ignore\r\nimport Footer from '../../containers/AgencyModern/Footer';\r\nimport ContentPage from \"../../components/page/ContentPage\";\r\n\r\nexport default function NewPage() {\r\n    return (\r\n        <ContentPage>\r\n            <Providers>\r\n                <TimelinePage/>\r\n            </Providers>\r\n        </ContentPage>\r\n    );\r\n};\r\n\r\nfunction TimelinePage() {\r\n\r\n    const theme = useAppTheme()\r\n\r\n    return (\r\n        <div>\r\n            <MainContainer>\r\n                <MainSlide>\r\n                    <SecondaryHeading variant={\"h2\"} style={{color: theme.palette.text.primary}} align={\"center\"}>\r\n                        Meet &nbsp; <span style={{background: theme.palette.secondary.main}}>T</span>imeline\r\n                    </SecondaryHeading>\r\n                    <MainHeading variant={\"h1\"} style={{color: theme.palette.text.primary}} align={\"center\"}>\r\n                        A Note Taking Tool\r\n                    </MainHeading>\r\n                    <MainDemoContainer>\r\n                        <StaticImage\r\n                            src={\"../../images/demo-1.png\"}\r\n                            alt={\"Demo First\"}\r\n                            width={1000}\r\n                        />\r\n                    </MainDemoContainer>\r\n                </MainSlide>\r\n            </MainContainer>\r\n            <ContentContainer>\r\n                <DemoSectionOne/>\r\n                <DemoSectionTwo/>\r\n                <AllFeatures/>\r\n                <AvailableSection/>\r\n                <div style={{height: \"2em\"}}/>\r\n            </ContentContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst SecondaryHeading = styled(Typography)`\r\n  color: ${props => props.theme.palette.text.primary} !important;\r\n\r\n  ${props => props.theme.breakpoints.down(\"md\")} {\r\n    font-size: 2rem !important;\r\n  }\r\n`\r\n\r\nconst MainHeading = styled(Typography)`\r\n  color: ${props => props.theme.palette.text.primary} !important;\r\n\r\n  ${props => props.theme.breakpoints.down(\"md\")} {\r\n    font-size: 4rem !important;\r\n  }\r\n`\r\n\r\nconst CenteredColumn = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nconst MainSlide = styled(CenteredColumn)`\r\n  padding-top: 2em;\r\n  margin-bottom: 1em;\r\n\r\n  ${props => props.theme.breakpoints.up(\"sm\")} {\r\n    padding-top: 6em;\r\n  }\r\n\r\n  ${props => props.theme.breakpoints.up(\"md\")} {\r\n    padding-top: 14em;\r\n  }\r\n`\r\n\r\nconst MainDemoContainer = styled.div`\r\n  position: absolute;\r\n  top: 30em;\r\n  transform: translateY(-50%);\r\n\r\n  ${props => props.theme.breakpoints.up(\"sm\")} {\r\n    top: 40em;\r\n  }\r\n\r\n  ${props => props.theme.breakpoints.up(\"md\")} {\r\n    top: 60em;\r\n  }\r\n`\r\n\r\nconst MainContainer = styled.div`\r\n  width: 100%;\r\n  height: 30em;\r\n  position: relative;\r\n  background: ${props => props.theme.palette.primary.dark};\r\n\r\n  ${props => props.theme.breakpoints.up(\"sm\")} {\r\n    height: 40em;\r\n  }\r\n\r\n  ${props => props.theme.breakpoints.up(\"md\")} {\r\n    height: 60em;\r\n  }\r\n`\r\n\r\nconst ContentContainer = styled.div`\r\n  margin-top: 30em;\r\n`\r\n\r\nconst AllFeatures = styled((props) => {\r\n    return (\r\n        <div {...props}>\r\n            <FeatureBox>\r\n                <LightDarkIcon/>\r\n                <FeatureText>\r\n                    Light / Dark Theme\r\n                </FeatureText>\r\n            </FeatureBox>\r\n            <FeatureBox>\r\n                <CloudSyncIcon/>\r\n                <FeatureText>\r\n                    Cloud Auto Sync\r\n                </FeatureText>\r\n            </FeatureBox>\r\n            <FeatureBox>\r\n                <SyncCircle/>\r\n                <FeatureText>\r\n                    Local Backup\r\n                </FeatureText>\r\n            </FeatureBox>\r\n        </div>\r\n    )\r\n})`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-width: 60%;\r\n  max-width: 80%;\r\n  margin: 2em auto;\r\n\r\n  ${props => props.theme.breakpoints.up(\"md\")} {\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n  }\r\n`\r\n\r\nconst AvailableSection = () => {\r\n\r\n    const theme = useAppTheme()\r\n\r\n    return (\r\n        <CenteredColumn>\r\n            <Typography style={{color: theme.palette.primary.main}}>\r\n                Available Now\r\n            </Typography>\r\n            <Link to=\"https://Timeline.github.io/web\" style={{textDecoration: \"none\"}} target={\"_blank\"}>\r\n                <CustomMainButton style={{width: \"270px\"}}>\r\n                    <WebIcon/>\r\n                    <span style={{\r\n                        width: \"100%\",\r\n                        color: \"white\",\r\n                        marginLeft: \"1em\",\r\n                    }}>\r\n                        Try on Web\r\n                    </span>\r\n                </CustomMainButton>\r\n            </Link>\r\n            <Link to=\"https://play.google.com/store/apps/details?id=com.wakaztahir.timeline\"\r\n                  style={{textDecoration: \"none\"}} target={\"_blank\"}>\r\n                <CustomMainButton style={{width: \"270px\"}}>\r\n                    <GooglePlayIcon/>\r\n                    <span style={{\r\n                        width: \"100%\",\r\n                        color: \"white\",\r\n                        marginLeft: \"1em\"\r\n                    }}>\r\n                    Download on Play Store\r\n                </span>\r\n                </CustomMainButton>\r\n            </Link>\r\n            <Link to=\"https://github.com/codeckle/timeline-kmp/releases/download/1.0.19/Timeline-1.0.19.msi\"\r\n                  style={{textDecoration: \"none\"}} target={\"_blank\"}>\r\n                <CustomMainButton style={{width: \"270px\"}}>\r\n                    <WindowsIcon/>\r\n                    <span style={{\r\n                        width: \"100%\",\r\n                        color: \"white\",\r\n                        marginLeft: \"1em\"\r\n                    }}>\r\n                    Download for Windows\r\n                </span>\r\n                </CustomMainButton>\r\n            </Link>\r\n        </CenteredColumn>\r\n    )\r\n}\r\n\r\nconst DemoSectionOne = () => {\r\n    return (\r\n        <DemoContainer>\r\n            <DemoText>\r\n                <Typography align={\"center\"} variant={\"h3\"}>\r\n                    Sketch Out <br/>\r\n                    Your Thoughts\r\n                </Typography>\r\n                <br/>\r\n                <Typography align={\"center\"}>\r\n                    Timeline provides most features required to draw out multiple\r\n                    images into one note , that can be shared & exported. <br/>\r\n                    Features like undo , redo , background color change , pointer color ,\r\n                    zoom & pan and the ability to toggle between them easily. <br/>\r\n                    But most prominent feature of sketch is that it exports to SVG.\r\n                </Typography>\r\n            </DemoText>\r\n            <DemoImage>\r\n                <StaticImage\r\n                    src={\"../../images/demo-2.png\"}\r\n                    alt={\"Demo Second\"}\r\n                    width={1000}\r\n                />\r\n            </DemoImage>\r\n        </DemoContainer>\r\n    )\r\n}\r\n\r\nconst DemoSectionTwo = styled((props) => {\r\n    return (\r\n        <DemoContainer {...props}>\r\n            <DemoImage>\r\n                <StaticImage\r\n                    src={\"../../images/demo-3.png\"}\r\n                    alt={\"Demo Third\"}\r\n                    width={1000}\r\n                />\r\n            </DemoImage>\r\n            <DemoText>\r\n                <Typography align={\"center\"} variant={\"h3\"}>\r\n                    Intuitive <br/>\r\n                    Easy To Understand\r\n                </Typography>\r\n                <br/>\r\n                <Typography align={\"center\"}>\r\n                    Timeline makes it easy to access the items you need.\r\n                    Everything will feel under your control.<br/>\r\n                    It will save you a low of time to do everything else and\r\n                    help you to be more productive , The app will suit to your needs.\r\n                </Typography>\r\n            </DemoText>\r\n        </DemoContainer>\r\n    )\r\n})`\r\n  flex-direction: column-reverse;\r\n\r\n  ${props => props.theme.breakpoints.up(\"sm\")} {\r\n    flex-direction: row;\r\n  }\r\n`"],"names":["hasNativeLazyLoadSupport","HTMLImageElement","prototype","srcSet","width","height","layout","wrapperStyle","className","style","getMainProps","isLoading","isLoaded","images","loading","shouldLoad","_extends","opacity","getPlaceholderProps","placeholder","backgroundColor","objectFit","objectPosition","position","top","left","bottom","right","result","transition","Sizer","React","createElement","paddingTop","maxWidth","display","alt","role","src","LayoutWrapper","_ref","children","props","_objectWithoutPropertiesLoose","Fragment","Image","decoding","Picture","_ref2","fallback","sources","sizes","length","map","media","type","key","fallbackImage","propTypes","PropTypes","displayName","Placeholder","_Picture$propTypes","propName","componentName","Error","MainImage","removeNewLines","str","replace","altValidator","rest","image","_excluded","Set","renderImageToStringPromise","renderImage","GatsbyImageHydrator","as","class","preactClass","onStartLoad","onLoad","onError","getWrapperProps","wStyle","wClass","wrapperProps","root","useRef","useMemo","JSON","stringify","sizer","useEffect","import","then","renderImageToString","swapPlaceholderImage","ssrImage","current","querySelector","complete","wasCached","setTimeout","removeAttribute","addEventListener","removeEventListener","onLoadListener","imageCache","add","cacheKey","has","animationFrame","cleanupCallback","innerHTML","requestAnimationFrame","cancelAnimationFrame","useLayoutEffect","ref","dangerouslySetInnerHTML","__html","suppressHydrationWarning","GatsbyImage","memo","_getStaticImage","StaticImage","__imageData","imageData","__error","console","warn","imgClassName","imgStyle","placeholderBackgroundColor","cleanedImages","source","checkDimensionProps","validLayouts","GatsbyImageBrowser","camelCase","input","options","Array","isArray","TypeError","Object","assign","pascalCase","x","trim","filter","join","toUpperCase","toLowerCase","string","isLastCharLower","isLastCharUpper","isLastLastCharUpper","i","character","test","slice","preserveCamelCase","_","p1","m","charAt","module","exports","ContentPadding","styled","contentPageLinks","leftMenuItems","data","e","staticLink","path","rightMenuItems","mobileMenuItems","ContentPage","ThemeProvider","theme","Head","title","name","content","href","rel","ResetCSS","GlobalStyle","ContentWrapper","Sticky","innerZ","activeClass","DrawerProvider","Navbar","Footer","DemoContainer","breakpoints","up","DemoText","DemoImage","FeatureBox","palette","primary","main","FeatureText","xmlns","viewBox","id","d","transform","CustomMainButton","fill","Providers","dark","Typography","realVariant","variant","family","useAppTheme","typography","textAlign","align","fontFamily","fontSize","NewPage","TimelinePage","MainContainer","MainSlide","SecondaryHeading","color","text","background","secondary","MainHeading","MainDemoContainer","ContentContainer","DemoSectionOne","DemoSectionTwo","AllFeatures","AvailableSection","componentId","down","CenteredColumn","LightDarkIcon","CloudSyncIcon","SyncCircle","Link","to","textDecoration","target","WebIcon","marginLeft","GooglePlayIcon","WindowsIcon"],"sourceRoot":""}